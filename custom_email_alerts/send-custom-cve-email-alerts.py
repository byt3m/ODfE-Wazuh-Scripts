#!/usr/bin/python3

import sys
import traceback
from utilities import *
from SendEmail import *

# Input dir has to be created manually and requires 770 permissions with user "root" and group "ossec" as owners: "drwxrwx--- root ossec"
# This script must have 750 permissions with user "root" and group "ossec" as owners: "-rwxr-x--- root ossec"
input_dir = "/var/ossec/integrations/custom-cve-email-alerts_output"
# debug input
# input_dir = R""
# temporal output
output_tmp = "/tmp"
# debug temporal output
# output_tmp = R""
# Log file path
log_file = os.path.join(input_dir, "send-custom-cve-email-alerts.log")
# Configuration file path, must have 640 permissions with user "root" and group "ossec" as owners
conf_file = os.path.join(get_script_path_from_args(sys.argv[0]), "send-custom-cve-email-alerts_settings.json")
# Input format
input_format = "csv"

# Format strings
subject_header = "[Wazuh] CVEs in agent "
# CSV
csv_header = '"Timestamp";"Rule level";"Rule ID";"Agent ID";"Agent name";"Agent IP";"Wazuh node";"CVE";"Description";"Score";"Severity";"Package name";"Package version";"Package condition"\n'
# HTML
html_css_style = "*{font-family:'Segoe UI';}table.customTable{width:100%;background-color:#FFFFFF;border-collapse:collapse;border-width:2px;border-color:#04508c;border-style:solid;color:#000000;}table.customTable td,table.customTable th{border-width:2px;border-color:#04508c;border-style:solid;padding:5px;}table.customTable thead{background-color:#04508c;color:#ffffff;}"
html_header = "<html><header><style>"+html_css_style+"</style></header><body>"
html_body = "Found CVEs in agent <b>XXAGENTXX</b>."
html_table_header = "<table class='customTable'><thead><tr><th>Timestamp</th><th>Rule level</th><th>Rule ID</th><th>Agent ID</th><th>Agent name</th><th>Agent IP</th><th>Wazuh node</th><th>CVE</th><th>Description</th><th>Score</th><th>Severity</th><th>Package name</th><th>Package version</th><th>Package condition</th></tr></thead><tbody>"
html_table_footer = "</tbody></table>"
html_footer = "</body></html>"


def main():
    # Read config JSON file
    conf = read_json(conf_file)

    # Init SendEmail class with our settings
    email = SendEmail(conf)

    # Check SMTP server
    if not email.check_smtp_server():
        log("  [X] Exiting, SMTP server returned code %s. Using settings:\n%s" % (email.check, json.dumps(conf)), log_file)
        sys.exit(1)
    else:
        log("  [*] SMTP server contacted successfully", log_file)

    # Treat input files
    log("  [!] Using %s format" % input_format, log_file)
    if input_format == "html":  # HTML
        # Get HTML files in input_dir
        html_files = get_files_by_extension(input_dir, ".html")
        if len(html_files):
            log("  [+] Found %s html files" % str(len(html_files)), log_file)
        else:
            log("  [!] No HTML files found", log_file)

        # Treat every HTML file found
        for file in html_files:
            log("    [-] Parsing file %s" % file, log_file)
            agent_name = file.replace(".html", "")
            file_path = os.path.join(input_dir, file)
            # Form the HTML body
            html_content = html_header
            html_content += html_body.replace("XXAGENTXX", agent_name)
            html_content += html_table_header
            html_content += read_text_file(file_path)
            html_content += html_footer
            # Send email
            subject = subject_header + agent_name
            if not email.send(subject, html_content):
                log("    [X] Exiting, error sending email", log_file)
            else:
                log("    [*] Email sent successfully", log_file)
                log("    [!] Removing file '%s'" % file_path, log_file)
                os.remove(file_path)
    elif input_format == "csv":  # CSV
        # Get CSV files in input_dir
        csv_files = get_files_by_extension(input_dir, ".csv")
        if len(csv_files):
            log("  [+] Found %s csv files" % str(len(csv_files)), log_file)
        else:
            log("  [!] No CSV files found", log_file)

        # Treat every CSV file found
        for file in csv_files:
            log("    [-] Parsing file %s" % file, log_file)
            agent_name = file.replace(".csv", "")
            file_path = os.path.join(input_dir, file)
            # Form the HTML content
            html_content = html_header
            html_content += html_body.replace("XXAGENTXX", agent_name) + " Please take a look at the attachment file."
            html_content += html_footer
            # Form the CSV content
            csv_content = csv_header
            csv_content += read_text_file(file_path)
            csv_path = os.path.join(output_tmp, file)
            save_file_to_disk(csv_content, csv_path)
            # Send email
            subject = subject_header + agent_name
            if not email.send(subject, html_content, csv_path):
                log("    [X] Exiting, error sending email", log_file)
            else:
                log("    [*] Email sent successfully", log_file)
                log("    [!] Removing files '%s' and '%s'" % (file_path, csv_path), log_file)
                os.remove(file_path)
                os.remove(csv_path)
    else:
        log("  [X] Exiting, input format '%s' not identified" % input_format, log_file)
        sys.exit(1)


if __name__ == "__main__":
    try:
        log("[+] Script started at " + get_time_now(), log_file)
        main()
    except Exception:
        log("[X] Exiting, an error occurred:\n%s" % traceback.format_exc(), log_file)
        raise
