#!/usr/bin/python3

import sys
import json
import traceback
from utilities import *

# Output dir has to be created manually and requires 770 permissions with user "root" and group "ossec" as owners: "drwxrwx--- root ossec"
# This script must have 750 permissions with user "root" and group "ossec" as owners:: "-rwxr-x--- root ossec"
output = "/var/ossec/integrations/custom-cve-email-alerts_output"
# debug output
# output = R""
# Log file path
log_file = os.path.join(output, "custom-cve-email-alerts.log")
# Output format
output_format = "csv"


def parse_vulnerability_alert(file):
    log("  [-] Parsing alert at \"" + file + "\"", log_file)
    # read json file
    with open(file) as f:
        alert = json.load(f)
    log("  [-] Alert json: " + json.dumps(alert), log_file)
    # parse json fields
    # check if "cvss" field exists
    if "cvss" in alert["data"]["vulnerability"]:
        score = alert["data"]["vulnerability"]["cvss"]["cvss3"]["base_score"]
    else:
        score = "-"
    return {
        "timestamp": alert["timestamp"],
        "rule_level": str(alert["rule"]["level"]),
        "rule_id": alert["rule"]["id"],
        "agent_id": alert["agent"]["id"],
        "agent_name": alert["agent"]["name"],
        "agent_ip": alert["agent"]["ip"],
        "wazuh_node": alert["cluster"]["node"],
        "CVE": alert["data"]["vulnerability"]["cve"],
        "description": alert["data"]["vulnerability"]["title"],
        "score": score,
        "severity": alert["data"]["vulnerability"]["severity"],
        "package_name": alert["data"]["vulnerability"]["package"]["name"],
        "package_version": alert["data"]["vulnerability"]["package"]["version"],
        "package_condition": alert["data"]["vulnerability"]["package"]["condition"]
    }


def main(args):
    # Retrieve needed args
    alert_file = args[1]
    # api_key = args[2]
    # hook_url = args[3]

    # check if output dir exists
    if not os.path.exists(output):
        log("[X] Exiting, directory \"" + output + "\" does not exist!", log_file)
        sys.exit(1)
        # os.mkdir(output_dir, mode=700)

    # Parse alert and save the html table column
    info = parse_vulnerability_alert(alert_file)
    log("  [-] Using format %s" % output_format, log_file)
    if output_format == "html":
        html_content = "<tr><td>" + info["timestamp"] + "</td><td>" + info["rule_level"] + "</td><td>" + info["rule_id"] + "</td><td>" + info["agent_id"] + "</td><td>" + info["agent_name"] + "</td><td>" + info["agent_ip"] + "</td><td>" + info["wazuh_node"] + "</td><td>" + info["CVE"] + "</td><td>" + info["description"] + "</td><td>" + info["score"] + "</td><td>" + info["severity"] + "</td><td>" + info["package_name"] + "</td><td>" + info["package_version"] + "</td><td>" + info["package_condition"] + "</td></tr>"
        save_file_to_disk(html_content, os.path.join(output, info["agent_name"] + ".html"))
    elif output_format == "csv":
        csv_content = '"' + info['timestamp'] + '";"' + info['rule_level'] + '";"' + info['rule_id'] + '";"' + info['agent_id'] + '";"' + info['agent_name'] + '";"' + info['agent_ip'] + '";"' + info['wazuh_node'] + '";"' + info['CVE'] + '";"' + info['description'] + '";"' + info['score'] + '";"' + info['severity'] + '";"' + info['package_name'] + '";"' + info['package_version'] + '";"' + info['package_condition'] + '"'
        save_file_to_disk(csv_content, os.path.join(output, info["agent_name"] + ".csv"))
    else:
        log("  [X] Exiting, output format '%s' not identified" % output_format, log_file)
        sys.exit(1)


if __name__ == "__main__":
    log("[+] Script started at " + get_time_now(), log_file)
    try:
        if len(sys.argv) < 4:
            log("[X] Exiting: bad arguments. Received " + str(len(sys.argv)) + " arguments.", log_file)
            sys.exit(1)
        main(sys.argv)
    except Exception:
        log("[X] Exiting, an error occurred:\n" + traceback.format_exc(), log_file)
        raise
